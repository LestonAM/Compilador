package Compilador;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Insets;
import java.awt.Point;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import static java.lang.System.console;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JViewport;
import javax.swing.border.AbstractBorder;
import Compilador.Scanner_1;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author jordenir
 */
public class AnalizarLexico extends javax.swing.JFrame {

    public String EnderecoArquivo,EnderecoTemporario,bufferIn;
        public String data ;
        public int resultadoJanelas;
    private Color myColor;
    
    /**
     * Creates new form AnalizarLexico
     */
       
    public AnalizarLexico() {
        initComponents();
        setLocationRelativeTo(null);
        jTextArea1.setBorder(new NumeredBorder());
       MostrarAtualizarDataHora();
       //Iniciamos um timer para atualizar o relógio  
        Timer t = new Timer("ClockTimer", true);  
          
        //Pedimos para ele disparar a cada 1 segundo.  
        t.schedule(new ClockTask(), 0, 1000);
    }
   
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        buttonGroup1 = new javax.swing.ButtonGroup();
        botaoLimparTudo = new javax.swing.JToggleButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        MenssagemTxt = new java.awt.Label();
        Botao_Analizar_lexico = new javax.swing.JToggleButton();
        Botao_analizar_sintax = new javax.swing.JToggleButton();
        jMenuBar1 = new javax.swing.JMenuBar();

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        jMenuItem3.setText("jMenuItem3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Compilador");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        botaoLimparTudo.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        botaoLimparTudo.setForeground(new java.awt.Color(230, 0, 0));
        botaoLimparTudo.setText("Limpar");
        botaoLimparTudo.setToolTipText("Limpar tudo");
        botaoLimparTudo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoLimparTudoActionPerformed(evt);
            }
        });
        getContentPane().add(botaoLimparTudo, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 0, 110, 57));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 51, 102));
        jLabel2.setText("Programa");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jScrollPane1.setEnabled(false);

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18), new java.awt.Color(255, 0, 0))); // NOI18N
        jTextArea1.setCaretColor(new java.awt.Color(51, 0, 255));
        jTextArea1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 550, 340));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 51, 102));
        jLabel1.setText("Resultado");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 20, -1, -1));

        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jTextArea2.setRows(5);
        jTextArea2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 24), new java.awt.Color(51, 0, 204))); // NOI18N
        jTextArea2.setFocusable(false);
        jTextArea2.setSelectionColor(new java.awt.Color(51, 51, 51));
        jScrollPane3.setViewportView(jTextArea2);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 50, 520, 340));

        MenssagemTxt.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        MenssagemTxt.setForeground(new java.awt.Color(0, 153, 153));
        MenssagemTxt.setText("Mensagem:");
        getContentPane().add(MenssagemTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 401, 610, 110));
        MenssagemTxt.getAccessibleContext().setAccessibleName("Notificacao ");

        Botao_Analizar_lexico.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Botao_Analizar_lexico.setText("Analizador Léxico");
        Botao_Analizar_lexico.setToolTipText("Analise Lexica");
        Botao_Analizar_lexico.setName(""); // NOI18N
        Botao_Analizar_lexico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Botao_Analizar_lexicoActionPerformed(evt);
            }
        });
        getContentPane().add(Botao_Analizar_lexico, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 410, -1, -1));

        Botao_analizar_sintax.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Botao_analizar_sintax.setText("Analizador Sintático");
        Botao_analizar_sintax.setToolTipText("Analise Sintatica");
        Botao_analizar_sintax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Botao_analizar_sintaxActionPerformed(evt);
            }
        });
        getContentPane().add(Botao_analizar_sintax, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 410, -1, -1));
        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoLimparTudoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoLimparTudoActionPerformed
        jTextArea1.setText("");
        jTextArea2.setText("");
        jTextArea1.requestFocus();
    }//GEN-LAST:event_botaoLimparTudoActionPerformed

    private void Botao_Analizar_lexicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Botao_Analizar_lexicoActionPerformed
        
        try {
          scanner_1TokenManager.countLexError =0;
          MenssagemTxt.setText("");
          jTextArea2.setText("");
        AnaliseLexSomente();
        
       //MostrarNoPainel();
        } catch (IOException ex) {
        Logger.getLogger(AnalizarLexico.class.getName()).log(Level.SEVERE, null, ex);
        }
        jTextArea1.requestFocus();
    }//GEN-LAST:event_Botao_Analizar_lexicoActionPerformed

    private void Botao_analizar_sintaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Botao_analizar_sintaxActionPerformed
              
        try {
            MenssagemTxt.setText("");
            //Painel1.clear();
            parser.contParseError = 0;
            scanner_1TokenManager.countLexError = 0;
            jTextArea2.setText("");
        Analise();
        if(parser.contParseError > 0 || scanner_1TokenManager.countLexError > 0){
    
    if(parser.contParseError > 0){
    jTextArea2.setText(jTextArea2.getText()+"\u005cn"+parser.contParseError +" Erro(s) sintático encontrado.");
    System.out.println(parser.contParseError +" Erro(s) sintático encontrado.");
    
    }
    if(scanner_1TokenManager.countLexError > 0){
        System.out.println(scanner_1TokenManager.countLexError +" Erro(s) Léxico encontrado.");
    jTextArea2.setText(jTextArea2.getText()+"\u005cn"+scanner_1TokenManager.countLexError +" Erro(s) Léxico encontrado.");
    
    }
    MenssagemTxt.setText("Analize contém "+parser.contParseError+ " Erro(s) Sintático"+ " e "+ scanner_1TokenManager.countLexError +" Erro(s) Léxico");
    MenssagemTxt.setBackground(Color.red);
    MenssagemTxt.setForeground(Color.WHITE);
    
}else{
    jTextArea2.setText(jTextArea2.getText()+"\u005cn"+"Finalizado com Sucesso."+"\u005cn"+"\u005cn");
    MenssagemTxt.setText("Análise sem erro sintático");
    MenssagemTxt.setBackground(Color.BLUE);
    
}
        
       //MostrarNoPainel();
        } catch (IOException ex) {
        Logger.getLogger(AnalizarLexico.class.getName()).log(Level.SEVERE, null, ex);
        jTextArea2.setText(jTextArea2.getText()+"\u005cn\u005cn"+ex);
        if(parser.contParseError > 0 || scanner_1TokenManager.countLexError > 0){
    
    if(parser.contParseError > 0){
    jTextArea2.setText(jTextArea2.getText()+"\u005cn"+parser.contParseError +" Erro(s) sintático encontrado.");
    System.out.println(parser.contParseError +" Erro(s) sintático encontrado.");
    
    }
    if(scanner_1TokenManager.countLexError > 0){
        System.out.println(scanner_1TokenManager.countLexError +" Erro(s) Léxico encontrado.");
    jTextArea2.setText(jTextArea2.getText()+"\u005cn"+scanner_1TokenManager.countLexError +" Erro(s) Léxico encontrado.");
    
    }
    MenssagemTxt.setText("Analize contém "+parser.contParseError+ " Erro(s) Sintático"+ " e "+ scanner_1TokenManager.countLexError +" Erro(s) Léxico");
    MenssagemTxt.setBackground(Color.red);
    MenssagemTxt.setForeground(Color.WHITE);
    
}else{
    jTextArea2.setText(jTextArea2.getText()+"\u005cn"+"Finalizado com Sucesso. "+"\u005cn"+"\u005cn");
    MenssagemTxt.setText("Análise sem erro sintático");
    MenssagemTxt.setBackground(Color.GREEN);
    
}
        } catch (ParseException ex) {
            Logger.getLogger(AnalizarLexico.class.getName()).log(Level.SEVERE, null, ex);
            jTextArea2.setText(jTextArea2.getText()+"\u005cn\u005cn"+ex);
            parser.contParseError++;
            if(parser.contParseError > 0 || scanner_1TokenManager.countLexError > 0){
    
    if(parser.contParseError > 0){
    jTextArea2.setText(jTextArea2.getText()+"\u005cn"+parser.contParseError +" Erro(s) sintático encontrado.");
    System.out.println(parser.contParseError +" Erro(s) sintático encontrado.");
    
    }
    if(scanner_1TokenManager.countLexError > 0){
        System.out.println(scanner_1TokenManager.countLexError +" Erro(s) Léxico encontrado.");
    jTextArea2.setText(jTextArea2.getText()+"\u005cn"+scanner_1TokenManager.countLexError +" Erro(s) Léxico encontrado.");
    
    }
    MenssagemTxt.setText("Análise contém "+parser.contParseError+ " Erro(s) Sintático"+ " e "+ scanner_1TokenManager.countLexError +" Erro(s) Léxico");
    MenssagemTxt.setBackground(Color.red);
    MenssagemTxt.setForeground(Color.WHITE);
    
}else{
    jTextArea2.setText(jTextArea2.getText()+"\u005cn"+"Finalizado com Sucesso "+"\u005cn"+"\u005cn");
    MenssagemTxt.setText("Análise sem erro sintático");
    MenssagemTxt.setBackground(Color.GREEN);
    
}
        } catch (ParseEOFException ex) {
            Logger.getLogger(AnalizarLexico.class.getName()).log(Level.SEVERE, null, ex);
            jTextArea2.setText(jTextArea2.getText()+"\u005cn\u005cn"+ex);
            if(parser.contParseError > 0 || scanner_1TokenManager.countLexError > 0){
    
    if(parser.contParseError > 0){
    jTextArea2.setText(jTextArea2.getText()+"\u005cn"+parser.contParseError +" Erro(s) sintático encontrado.");
    System.out.println(parser.contParseError +" Erro(s) sintático encontrado.");
    
    }
    if(scanner_1TokenManager.countLexError > 0){
        System.out.println(scanner_1TokenManager.countLexError +" Erro(s) Léxico encontrado.");
    jTextArea2.setText(jTextArea2.getText()+"\u005cn"+scanner_1TokenManager.countLexError +" Erro(s) Léxico encontrado.");
    
    }
    MenssagemTxt.setText("Analize contém "+parser.contParseError+ " Erro(s) Sintático"+ " e "+ scanner_1TokenManager.countLexError +" Erro(s) Léxico");
    MenssagemTxt.setBackground(Color.red);
    MenssagemTxt.setForeground(Color.WHITE);
    
}else{
    jTextArea2.setText(jTextArea2.getText()+"\u005cn"+" MenssagemTxt.setBackground(Color.WHITE); "+"\u005cn"+"\u005cn");
    MenssagemTxt.setText("Analize sem erro sintático");
    MenssagemTxt.setBackground(Color.WHITE);
    
}
        }
        jTextArea1.requestFocus();
    }//GEN-LAST:event_Botao_analizar_sintaxActionPerformed
int Nlinha;
    private void AbrirArquivo(){
//            
         }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnalizarLexico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnalizarLexico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnalizarLexico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnalizarLexico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AnalizarLexico().setVisible(true);
                
            }
        });
    }




    Scanner_1 scanner;
    Scanner_1 parser;
    int i;
    boolean ms = false;
    boolean debug = false;
    Scanner_1 scanner1;
    private void Analise() throws IOException, ParseException, ParseEOFException{
                
                        EnderecoTemporario =  System.getProperty("java.io.tmpdir")+"temp.txt";
                 File arquivo = new File(EnderecoTemporario);  
                 FileWriter fw = new FileWriter(arquivo);  
                 BufferedWriter bw = new BufferedWriter(fw);      
                 bw.write(jTextArea1.getText());  
                 bw.flush();  
                 bw.close(); 
                              
                 String nomeArq = new String (EnderecoTemporario);
Scanner_1 lex = new Scanner_1(new FileInputStream(nomeArq));

String args[] = null;

if(jTextArea1.getText().equals("")){
    JOptionPane.showMessageDialog(null, "Não ha tokens a ser processado");
    
}else{
try {        
//lex.processa(); //processamento dos lexemas 

contErroSintax = 0;
MenssagemTxt.setBackground(Color.GREEN);
System.out.println("            Iniciar Analise Sintatica            ");
jTextArea2.setText("========= Iniciar Analise Sintatica ======"+"\u005cn");
lex.PROGRAMA();

}
catch (Error e)
    
{
System.out.println(e.getMessage());//Mensagem de erro léxico (em ingles) mostrando linha e coluna
}
finally {

}
}

}
    public int contErroSintax = 0;
    Scanner_1TokenManager scanner_1TokenManager; 
     private void AnaliseLexSomente() throws IOException{
                
                        EnderecoTemporario =  System.getProperty("java.io.tmpdir")+"temp.txt";
                 File arquivo = new File(EnderecoTemporario);  
                 FileWriter fw = new FileWriter(arquivo);  
                 BufferedWriter bw = new BufferedWriter(fw);      
                 bw.write(jTextArea1.getText());  
                 bw.flush();  
                 bw.close(); 
                 
      
                 
                 String nomeArq = new String (EnderecoTemporario);
Scanner_1 lex = new Scanner_1(new FileInputStream(nomeArq));
String args[] = null;

if(jTextArea1.getText().equals("")){
    JOptionPane.showMessageDialog(null, "Não ha tokens a ser processado");
    
}else{
try {
    MenssagemTxt.setBackground(Color.GREEN);
         System.out.println("============ Iniciar AnaliseE Lexica ============");
    jTextArea2.setText("================== Iniciar Analise Lexica =============="+"\u005cn"); 
lex.processa(); //processamento dos lexemas 

}

catch (Exception e)
{
JOptionPane.showMessageDialog(null, "Analise Sintática Com Erro");
System.out.println("Erro de Token.");

e.printStackTrace();
}
catch (Error e)
{
System.out.println(e.getMessage());//Mensagem de erro léxico (em ingles) mostrando linha e coluna
}
finally {
    if(scanner_1TokenManager.countLexError > 0){
        jTextArea2.setText(jTextArea2.getText()+"\u005cn"+"\u005cn"+scanner_1TokenManager.countLexError +" Erro(s) Léxico encontrado.");
    MenssagemTxt.setText("Analize contém "+ scanner_1TokenManager.countLexError +" Erro(s) Léxico");
    MenssagemTxt.setBackground(Color.red);
    MenssagemTxt.setForeground(Color.WHITE);
    
}else{
    jTextArea2.setText(jTextArea2.getText()+"\u005cn"+"\u005cn"+"============ Finalzado Com sucesso=============="+"\u005cn"+"\u005cn");
    MenssagemTxt.setText("Análise sem erro Léxico");
    
        
    }   
}
}
     }
     
     private class ClockTask extends TimerTask {  
        @Override  
        public void run() {  
              
            EventQueue.invokeLater(() -> {
               
                MostrarAtualizarDataHora();  
            });  
        }  
    }  
    
    private void MostrarAtualizarDataHora() {
    
    }

	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton Botao_Analizar_lexico;
    private javax.swing.JToggleButton Botao_analizar_sintax;
    private java.awt.Label MenssagemTxt;
    private javax.swing.JToggleButton botaoLimparTudo;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    public static javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
