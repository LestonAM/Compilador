/* Scanner_1.java */
/* Generated By:JavaCC: Do not edit this line. Scanner_1.java */
package Compilador;
import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;
//import recovery.*;   // importa as classes de recuperação de erros do AS

public class Scanner_1 implements Scanner_1Constants {
AnalizarLexico analizarlexico;
static int contParseError = 0;   // contador de erros sintáticos
static boolean debug_recovery = true;          // controla verbose de recuperação de erros
static boolean trace_enabled1 = false;
Token lastError = null;          // proximo token null

//public ArrayList<String> Painel3 = new ArrayList<>();
boolean Menosshort = false; //Saida resumida falso
public void processa() throws Exception{
Token t = new Token ();


do {

t = getNextToken(); //Obtém o próximo token
String nomeToken = tokenImage[t.kind]; //guarda o nome do token na string
//System.out.println(nomeToken + "___" + t); //imprime o token 
} while(t.kind!=0); //condicao de parada: final do arquivo (constante eof 0 )
}

public static void main(String args[], String x) throws ParseException, FileNotFoundException {
//Tratar leitura do arquivo... 
boolean debug = false;
String nomeArq = new String(x);
Scanner_1 parser;
int i;
boolean ms = false;
Scanner_1 lex = new Scanner_1(new FileInputStream(nomeArq));
try {
//lex.processa(); //processamento dos lexemas
//lex.INIT();
JOptionPane.showMessageDialog(null, "Análise Sintática Bem Sucedida");
}
catch (Exception e)
{
JOptionPane.showMessageDialog(null, "Análise Sintática Não Sucedida");
System.out.println("Erro de Token.");
System.out.println(e.getMessage());
e.printStackTrace();
}
catch (Error e)
{
System.out.println(e.getMessage()); //Mensagem de erro léxico (em ingles) mostrando linha e coluna
}

}

static public String im(int x)
{
int k;
String s;
   s = tokenImage[x];
   k = s.lastIndexOf("\u005c"");
   try {s = s.substring(1,k);}
   catch (StringIndexOutOfBoundsException e)
   {}
   return s;
}


boolean eof;    // variável que indica se EOF foi alcançado
// o método abaixo consome tokens ate alcançar um que pertença ao conjunto
// de sincronização

void consumeUntil(RecoverySet g,
                  ParseException e,
                  String met) throws ParseEOFException,
                  ParseException
{
Token tok;

   if ( debug_recovery) // informação sobre a recuperação
   {
       System.out.println();
       System.out.println("*** " + met + " ***");
       System.out.println("     Sincronizando com: " + g);
       analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cn"+"\u005cn"+"*** " + met + " ***"+"\u005cn"+"     Sincronizando com: " + g);
        //analizarlexico.Painel1.add("\n"+"\n"+"*** " + met + " ***"+"\n"+"     Sincronizando com: " + g);
        //analizarlexico.Lista(analizarlexico.Painel1);
   }

   if (g == null) throw e; // se o conjunto é null, propaga a exceção

   tok = getToken(1); // pega token corrente
   while ( ! eof )  // se não chegou ao fim do arquivo
   {
        if ( g.contains(tok.kind ) ) //achou um token no conjunto
        {
             if ( debug_recovery)
               System.out.println("     Encontrado token sincronizando: " + im(tok.kind));
               analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cn"+"     Encontrado token sincronizando: " + im(tok.kind));
        //analizarlexico.Painel1.add("\n"+"     Encontrado token sincronizando: " + im(tok.kind));
        //analizarlexico.Lista(analizarlexico.Painel1);
             break;
        }
        if (debug_recovery){
             System.out.println("     Ingnorando token: " + im(tok.kind));
             analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cn"+"\u005cn"+"     Ingnorando token: " + im(tok.kind));
        //analizarlexico.Painel1.add("\n"+"     Ingnorando token: " + im(tok.kind));
        //analizarlexico.Lista(analizarlexico.Painel1);
        }
        getNextToken();     // pega próximo token       
        tok = getToken(1);
        if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?   
            eof = true;
    }
   if ( tok != lastError) //mostra somente se forem erros diferentes
   {
        analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cn"+"\u005cn"+e.getMessage());
        //analizarlexico.Painel1.add("\n"+e.getMessage());
        //analizarlexico.Lista(analizarlexico.Painel1);

        System.out.println(e.getMessage());
        lastError = tok;
        contParseError++;  // incrementa número de erros
   }
   if ( eof ) throw new ParseEOFException("EOF found prematurely.");
}

  final public void PROGRAMA() throws ParseException, ParseEOFException {
    trace_call("PROGRAMA");
    try {trace_enabled = trace_enabled1;
RecoverySet g = First.classe;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 0:{
        jj_consume_token(0);
        break;
        }
      case PUBLIC:
      case STATIC:
      case PRIVATE:
      case PROTECTED:
      case ABSTRACT:{
        try {
          CLASS(null);
          jj_consume_token(0);
        } catch (ParseException e) {
consumeUntil(g,e,"programa");
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 0:
        case PUBLIC:
        case STATIC:
        case PRIVATE:
        case PROTECTED:
        case ABSTRACT:
        case IF:
        case FOR:
        case WHILE:
        case DO:
        case SWITCH:
        case CHAR:
        case INT:
        case FLOAT:
        case BOOLEAN:
        case STRING:
        case DOUBLE:
        case SOMA:
        case SUBTRACAO:
        case MULTIPLICACAO:
        case DIVISAO:
        case IDENTIFICADOR:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 0:
          case PUBLIC:
          case STATIC:
          case PRIVATE:
          case PROTECTED:
          case ABSTRACT:{
            PROGRAMA();
            break;
            }
          case IF:
          case FOR:
          case WHILE:
          case DO:
          case SWITCH:
          case CHAR:
          case INT:
          case FLOAT:
          case BOOLEAN:
          case STRING:
          case DOUBLE:
          case SOMA:
          case SUBTRACAO:
          case MULTIPLICACAO:
          case DIVISAO:
          case IDENTIFICADOR:{
            LINHA_CODIGO(g);
            break;
            }
          default:
            jj_la1[0] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("PROGRAMA");
    }
  }

  final public void CLASS(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("CLASS");
    try {
      TIPO_CLASS(g);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUBLIC:
      case STATIC:
      case PRIVATE:
      case PROTECTED:
      case ABSTRACT:{
        TIPO_CLASS(g);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(CLASS);
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(ACHAVE);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CHAR:
        case INT:
        case FLOAT:
        case BOOLEAN:
        case STRING:
        case DOUBLE:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_1;
        }
        CRIAR_VARIAVEL(g);
        jj_consume_token(PV);
      }
      METODO(g);
      jj_consume_token(FCHAVE);
    } finally {
      trace_return("CLASS");
    }
  }

  final public void TIPO_CLASS(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("TIPO_CLASS");
    try {RecoverySet f = First.classe;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLIC:{
          jj_consume_token(PUBLIC);
          break;
          }
        case PROTECTED:{
          jj_consume_token(PROTECTED);
          break;
          }
        case PRIVATE:{
          jj_consume_token(PRIVATE);
          break;
          }
        case ABSTRACT:{
          jj_consume_token(ABSTRACT);
          break;
          }
        case STATIC:{
          jj_consume_token(STATIC);
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
consumeUntil(f,e,"programa");
      }
    } finally {
      trace_return("TIPO_CLASS");
    }
  }

//void MAIN(RecoverySet g)throws ParseEOFException:{}{
//[TIPO_CLASS()[TIPO_CLASS()] "void" "main" "(" "String" [ "[" "]" ] "args" [ "[" "]"] ")" "{" LINHAS_CODIGO(null) "}"] }
  final public 
void LINHAS_CODIGO(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("LINHAS_CODIGO");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case FOR:
      case WHILE:
      case DO:
      case SWITCH:
      case CHAR:
      case INT:
      case FLOAT:
      case BOOLEAN:
      case STRING:
      case DOUBLE:
      case SOMA:
      case SUBTRACAO:
      case MULTIPLICACAO:
      case DIVISAO:
      case IDENTIFICADOR:{
        LINHA_CODIGO(null);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
    } finally {
      trace_return("LINHAS_CODIGO");
    }
  }

  final public void LINHA_CODIGO(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("LINHA_CODIGO");
    try {
      LINHA(null);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case FOR:
      case WHILE:
      case DO:
      case SWITCH:
      case CHAR:
      case INT:
      case FLOAT:
      case BOOLEAN:
      case STRING:
      case DOUBLE:
      case SOMA:
      case SUBTRACAO:
      case MULTIPLICACAO:
      case DIVISAO:
      case IDENTIFICADOR:{
        LINHA_CODIGO(g);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    } finally {
      trace_return("LINHA_CODIGO");
    }
  }

  final public void LINHA(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("LINHA");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CHAR:
        case INT:
        case FLOAT:
        case BOOLEAN:
        case STRING:
        case DOUBLE:{
          CRIAR_VARIAVEL(g);
          jj_consume_token(PV);
          break;
          }
        case SOMA:
        case SUBTRACAO:
        case MULTIPLICACAO:
        case DIVISAO:
        case IDENTIFICADOR:{
          ATRIBUIR_VALOR_VARIAVEL(g);
          jj_consume_token(PV);
          break;
          }
        case IF:{
          CONDICOES(g);
          break;
          }
        case FOR:{
          BUSCAR_FOR(g);
          break;
          }
        case SWITCH:{
          BUSCAR_SWITCH(g);
          break;
          }
        case WHILE:{
          BUSCAR_WHILE(g);
          break;
          }
        case DO:{
          BUSCAR_DO_WHILE(g);
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
consumeUntil(g,e,"Linha");
      }
    } finally {
      trace_return("LINHA");
    }
  }

  final public void CRIAR_VARIAVEL(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("CRIAR_VARIAVEL");
    try {RecoverySet f = First.criarvariavel;
      try {
        TIPO(null);
        jj_consume_token(IDENTIFICADOR);
        OP_COMUMM(g);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case V:{
            ;
            break;
            }
          default:
            jj_la1[9] = jj_gen;
            break label_2;
          }
          jj_consume_token(V);
          jj_consume_token(IDENTIFICADOR);
          OP_COMUMM(g);
        }
      } catch (ParseException e) {
consumeUntil(f,e,"criar variavel");
      }
    } finally {
      trace_return("CRIAR_VARIAVEL");
    }
  }

  final public void TIPO(RecoverySet g) throws ParseException {
    trace_call("TIPO");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        jj_consume_token(INT);
        break;
        }
      case FLOAT:{
        jj_consume_token(FLOAT);
        break;
        }
      case STRING:{
        jj_consume_token(STRING);
        break;
        }
      case BOOLEAN:{
        jj_consume_token(BOOLEAN);
        break;
        }
      case DOUBLE:{
        jj_consume_token(DOUBLE);
        break;
        }
      case CHAR:{
        jj_consume_token(CHAR);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("TIPO");
    }
  }

  final public void OP_COMUMM(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("OP_COMUMM");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OP_ATRIBUICAO_IGUAL:{
        jj_consume_token(OP_ATRIBUICAO_IGUAL);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEIRO:
        case DECIMAL:
        case TRUE:
        case FALSE:
        case CONSTANTE_CHAR:
        case CONSTANTE_STRING:{
          VALOR(g);
          break;
          }
        case IDENTIFICADOR:{
          jj_consume_token(IDENTIFICADOR);
          break;
          }
        case AP:{
          EXP(g);
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SOMA:
        case SUBTRACAO:
        case MULTIPLICACAO:
        case DIVISAO:
        case IDENTIFICADOR:{
          OP_COMUM(g);
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SOMA:
          case SUBTRACAO:
          case MULTIPLICACAO:
          case DIVISAO:{
            ;
            break;
            }
          default:
            jj_la1[13] = jj_gen;
            break label_3;
          }
          OPERADOR(g);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INTEIRO:
          case DECIMAL:
          case TRUE:
          case FALSE:
          case CONSTANTE_CHAR:
          case CONSTANTE_STRING:{
            VALOR(g);
            break;
            }
          case IDENTIFICADOR:{
            jj_consume_token(IDENTIFICADOR);
            break;
            }
          case AP:{
            EXP(g);
            break;
            }
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("OP_COMUMM");
    }
  }

  final public void METODO(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("METODO");
    try {
      METODOS(g);
    } finally {
      trace_return("METODO");
    }
  }

  final public void METODOS(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("METODOS");
    try {
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLIC:
        case STATIC:
        case PRIVATE:
        case PROTECTED:
        case ABSTRACT:{
          ;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_4;
        }
        INVOCAR_METODO(g);
      }
    } finally {
      trace_return("METODOS");
    }
  }

  final public void MAIN(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("MAIN");
    try {
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(AP);
      jj_consume_token(STRING);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ACOLCHETE:{
        jj_consume_token(ACOLCHETE);
        jj_consume_token(FCOLCHETE);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      jj_consume_token(ARGS);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ACOLCHETE:{
        jj_consume_token(ACOLCHETE);
        jj_consume_token(FCOLCHETE);
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      jj_consume_token(FP);
      jj_consume_token(ACHAVE);
      LINHAS_CODIGO(null);
      jj_consume_token(FCHAVE);
    } finally {
      trace_return("MAIN");
    }
  }

  final public void INVOCAR_METODO(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("INVOCAR_METODO");
    try {
      TIPO_PROTECAO();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUBLIC:
      case STATIC:
      case PRIVATE:
      case PROTECTED:
      case ABSTRACT:{
        TIPO_PROTECAO();
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      TIPO_RETORNO(g);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFICADOR:{
        jj_consume_token(IDENTIFICADOR);
        jj_consume_token(AP);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case VOID:
          case V:
          case INT:
          case FLOAT:
          case STRING:{
            ;
            break;
            }
          default:
            jj_la1[20] = jj_gen;
            break label_5;
          }
          ARGUMENTOS(g);
        }
        break;
        }
      case MAIN:{
        jj_consume_token(MAIN);
        jj_consume_token(AP);
        jj_consume_token(STRING);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ACOLCHETE:{
          jj_consume_token(ACOLCHETE);
          jj_consume_token(FCOLCHETE);
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          ;
        }
        jj_consume_token(ARGS);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ACOLCHETE:{
          jj_consume_token(ACOLCHETE);
          jj_consume_token(FCOLCHETE);
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(FP);
      jj_consume_token(ACHAVE);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case FOR:
        case WHILE:
        case DO:
        case SWITCH:
        case CHAR:
        case INT:
        case FLOAT:
        case BOOLEAN:
        case STRING:
        case DOUBLE:
        case SOMA:
        case SUBTRACAO:
        case MULTIPLICACAO:
        case DIVISAO:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          break label_6;
        }
        COMANDO(g);
      }
      jj_consume_token(FCHAVE);
    } finally {
      trace_return("INVOCAR_METODO");
    }
  }

  final public void TIPO_PROTECAO() throws ParseException {
    trace_call("TIPO_PROTECAO");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUBLIC:{
        jj_consume_token(PUBLIC);
        break;
        }
      case PROTECTED:{
        jj_consume_token(PROTECTED);
        break;
        }
      case PRIVATE:{
        jj_consume_token(PRIVATE);
        break;
        }
      case ABSTRACT:{
        jj_consume_token(ABSTRACT);
        break;
        }
      case STATIC:{
        jj_consume_token(STATIC);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("TIPO_PROTECAO");
    }
  }

  final public void TIPO_RETORNO(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("TIPO_RETORNO");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        jj_consume_token(INT);
        break;
        }
      case FLOAT:{
        jj_consume_token(FLOAT);
        break;
        }
      case STRING:{
        jj_consume_token(STRING);
        break;
        }
      case VOID:{
        jj_consume_token(VOID);
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("TIPO_RETORNO");
    }
  }

  final public void ARGUMENTOS(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("ARGUMENTOS");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VOID:
      case INT:
      case FLOAT:
      case STRING:{
        TIPO_RETORNO(g);
        jj_consume_token(IDENTIFICADOR);
        break;
        }
      case V:{
        jj_consume_token(V);
        ARGUMENTOS(g);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("ARGUMENTOS");
    }
  }

//void COMANDO(RecoverySet g)throws ParseEOFException:{}{CRIAR_VARIAVEL(g)<PV> | ATRIBUIR_VALOR_VARIAVEL(g)<PV> | CONDICOES(g) | BUSCAR_FOR(g) | BUSCAR_SWITCH(g)}
  final public                 void COMANDO(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("COMANDO");
    try {
      LINHA(g);
    } finally {
      trace_return("COMANDO");
    }
  }

  final public void ATRIBUIR_VALOR_VARIAVEL(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("ATRIBUIR_VALOR_VARIAVEL");
    try {
      OP_COMUM(g);
    } finally {
      trace_return("ATRIBUIR_VALOR_VARIAVEL");
    }
  }

  final public void OP_COMUM(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("OP_COMUM");
    try {RecoverySet f = First.criarvariavel;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFICADOR:{
          jj_consume_token(IDENTIFICADOR);
          jj_consume_token(OP_ATRIBUICAO_IGUAL);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INTEIRO:
          case DECIMAL:
          case TRUE:
          case FALSE:
          case CONSTANTE_CHAR:
          case CONSTANTE_STRING:{
            VALOR(null);
            break;
            }
          case IDENTIFICADOR:{
            jj_consume_token(IDENTIFICADOR);
            break;
            }
          case AP:{
            EXP(null);
            break;
            }
          default:
            jj_la1[28] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SOMA:
          case SUBTRACAO:
          case MULTIPLICACAO:
          case DIVISAO:
          case IDENTIFICADOR:{
            OP_COMUM(g);
            break;
            }
          default:
            jj_la1[29] = jj_gen;
            ;
          }
          break;
          }
        case SOMA:
        case SUBTRACAO:
        case MULTIPLICACAO:
        case DIVISAO:{
          OPERADOR(null);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INTEIRO:
          case DECIMAL:
          case TRUE:
          case FALSE:
          case CONSTANTE_CHAR:
          case CONSTANTE_STRING:{
            VALOR(null);
            break;
            }
          case IDENTIFICADOR:{
            jj_consume_token(IDENTIFICADOR);
            break;
            }
          case AP:{
            EXP(null);
            break;
            }
          default:
            jj_la1[30] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
consumeUntil(f,e,"Atribuir valor variavel");
      }
    } finally {
      trace_return("OP_COMUM");
    }
  }

  final public void OPERADOR(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("OPERADOR");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SOMA:{
        jj_consume_token(SOMA);
        break;
        }
      case SUBTRACAO:{
        jj_consume_token(SUBTRACAO);
        break;
        }
      case MULTIPLICACAO:{
        jj_consume_token(MULTIPLICACAO);
        break;
        }
      case DIVISAO:{
        jj_consume_token(DIVISAO);
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("OPERADOR");
    }
  }

  final public void VALOR(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("VALOR");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEIRO:{
        jj_consume_token(INTEIRO);
        break;
        }
      case DECIMAL:{
        jj_consume_token(DECIMAL);
        break;
        }
      case TRUE:
      case FALSE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TRUE:{
          jj_consume_token(TRUE);
          break;
          }
        case FALSE:{
          jj_consume_token(FALSE);
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case CONSTANTE_STRING:{
        jj_consume_token(CONSTANTE_STRING);
        break;
        }
      case CONSTANTE_CHAR:{
        jj_consume_token(CONSTANTE_CHAR);
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("VALOR");
    }
  }

  final public void EXP(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("EXP");
    try {
      jj_consume_token(AP);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFICADOR:{
        jj_consume_token(IDENTIFICADOR);
        break;
        }
      case INTEIRO:
      case DECIMAL:
      case TRUE:
      case FALSE:
      case CONSTANTE_CHAR:
      case CONSTANTE_STRING:{
        VALOR(g);
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      OP_COMUM(g);
      jj_consume_token(FP);
    } finally {
      trace_return("EXP");
    }
  }

  final public void INCREMENTO(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("INCREMENTO");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCREMENTAR:{
        jj_consume_token(INCREMENTAR);
        break;
        }
      case DECREMENTAR:{
        jj_consume_token(DECREMENTAR);
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("INCREMENTO");
    }
  }

  final public void CONDICOES(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("CONDICOES");
    try {
      CONDICAO_IF(g);
      CONDICAO_ELSE(g);
    } finally {
      trace_return("CONDICOES");
    }
  }

  final public void CONDICAO_IF(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("CONDICAO_IF");
    try {
      CONDICAO_SE(g);
    } finally {
      trace_return("CONDICAO_IF");
    }
  }

  final public void CONDICAO_SE(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("CONDICAO_SE");
    try {RecoverySet f = First.condicao;
      try {
        jj_consume_token(IF);
        CONDICAO(null);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ACHAVE:{
          jj_consume_token(ACHAVE);
          LINHAS_CODIGO(g);
          jj_consume_token(FCHAVE);
          break;
          }
        default:
          jj_la1[37] = jj_gen;
          ;
        }
      } catch (ParseException e) {
consumeUntil(f,e,"Condicao if");
      }
    } finally {
      trace_return("CONDICAO_SE");
    }
  }

  final public void CONDICAO(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("CONDICAO");
    try {
      jj_consume_token(AP);
      COND(null);
      jj_consume_token(FP);
    } finally {
      trace_return("CONDICAO");
    }
  }

  final public void COND(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("COND");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEIRO:
      case DECIMAL:
      case TRUE:
      case FALSE:
      case CONSTANTE_CHAR:
      case CONSTANTE_STRING:{
        VALOR(null);
        break;
        }
      case IDENTIFICADOR:{
        jj_consume_token(IDENTIFICADOR);
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      CONDICIONAL(null);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEIRO:
      case DECIMAL:
      case TRUE:
      case FALSE:
      case CONSTANTE_CHAR:
      case CONSTANTE_STRING:{
        VALOR(null);
        break;
        }
      case IDENTIFICADOR:{
        jj_consume_token(IDENTIFICADOR);
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case E:
      case EE:
      case OU:
      case OUU:{
        OP_LOGICO();
        COND(null);
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        ;
      }
    } finally {
      trace_return("COND");
    }
  }

  final public void OP_LOGICO() throws ParseException {
    trace_call("OP_LOGICO");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case E:{
        jj_consume_token(E);
        break;
        }
      case OUU:{
        jj_consume_token(OUU);
        break;
        }
      case EE:{
        jj_consume_token(EE);
        break;
        }
      case OU:{
        jj_consume_token(OU);
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("OP_LOGICO");
    }
  }

  final public void CONDICIONAL(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("CONDICIONAL");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAIORQ:{
        jj_consume_token(MAIORQ);
        break;
        }
      case MENORQ:{
        jj_consume_token(MENORQ);
        break;
        }
      case IGUAL:{
        jj_consume_token(IGUAL);
        break;
        }
      case MENORIGUAL:{
        jj_consume_token(MENORIGUAL);
        break;
        }
      case MAIORIGUAL:{
        jj_consume_token(MAIORIGUAL);
        break;
        }
      case DIFERENTE:{
        jj_consume_token(DIFERENTE);
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("CONDICIONAL");
    }
  }

  final public void CONDICAO_ELSE(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("CONDICAO_ELSE");
    try {RecoverySet f = First.condicao;
      try {
        CONDICAO_ELSE_IF(null);
        CONDICAO_NAO(null);
      } catch (ParseException e) {
consumeUntil(f,e,"Condicao else");
      }
    } finally {
      trace_return("CONDICAO_ELSE");
    }
  }

  final public void CONDICAO_NAO(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("CONDICAO_NAO");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE:{
        jj_consume_token(ELSE);
        jj_consume_token(ACHAVE);
        LINHAS_CODIGO(g);
        jj_consume_token(FCHAVE);
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        ;
      }
    } finally {
      trace_return("CONDICAO_NAO");
    }
  }

//lookahead é pra reconhecer dois caracteres a frente tava dando conflito com a condicao nao prefixo else 
  final public     void CONDICAO_ELSE_IF(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("CONDICAO_ELSE_IF");
    try {
      label_7:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_7;
        }
        CONDICAO_SENAO_SE(null);
      }
    } finally {
      trace_return("CONDICAO_ELSE_IF");
    }
  }

  final public void CONDICAO_SENAO_SE(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("CONDICAO_SENAO_SE");
    try {
      jj_consume_token(ELSE);
      jj_consume_token(IF);
      CONDICAO(null);
      jj_consume_token(ACHAVE);
      LINHAS_CODIGO(g);
      jj_consume_token(FCHAVE);
    } finally {
      trace_return("CONDICAO_SENAO_SE");
    }
  }

  final public void BUSCAR_FOR(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("BUSCAR_FOR");
    try {RecoverySet f = First.buscarfor;
      try {
        jj_consume_token(FOR);
        jj_consume_token(AP);
        INICIAR_FOR(g);
        jj_consume_token(PV);
        CONDICAO_FOR(null);
        jj_consume_token(PV);
        INCREMENTO_DECREMENTO(null);
        jj_consume_token(FP);
        jj_consume_token(ACHAVE);
        LINHAS_CODIGO(g);
        jj_consume_token(FCHAVE);
      } catch (ParseException e) {
consumeUntil(f,e,"Buscar For");
      }
    } finally {
      trace_return("BUSCAR_FOR");
    }
  }

  final public void INICIAR_FOR(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("INICIAR_FOR");
    try {
      CRIAR_VARIAVEL(g);
    } finally {
      trace_return("INICIAR_FOR");
    }
  }

  final public void CONDICAO_FOR(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("CONDICAO_FOR");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEIRO:
      case DECIMAL:
      case TRUE:
      case FALSE:
      case CONSTANTE_CHAR:
      case CONSTANTE_STRING:{
        VALOR(null);
        break;
        }
      case IDENTIFICADOR:{
        jj_consume_token(IDENTIFICADOR);
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      CONDICIONAL(null);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEIRO:
      case DECIMAL:
      case TRUE:
      case FALSE:
      case CONSTANTE_CHAR:
      case CONSTANTE_STRING:{
        VALOR(null);
        break;
        }
      case IDENTIFICADOR:{
        jj_consume_token(IDENTIFICADOR);
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("CONDICAO_FOR");
    }
  }

  final public void INCREMENTO_DECREMENTO(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("INCREMENTO_DECREMENTO");
    try {
      jj_consume_token(IDENTIFICADOR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCREMENTAR:{
        jj_consume_token(INCREMENTAR);
        break;
        }
      case DECREMENTAR:{
        jj_consume_token(DECREMENTAR);
        break;
        }
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("INCREMENTO_DECREMENTO");
    }
  }

  final public void BUSCAR_SWITCH(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("BUSCAR_SWITCH");
    try {RecoverySet f = First.buscarswitch;
      try {
        jj_consume_token(SWITCH);
        jj_consume_token(AP);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFICADOR:{
          jj_consume_token(IDENTIFICADOR);
          break;
          }
        case INTEIRO:
        case DECIMAL:
        case TRUE:
        case FALSE:
        case CONSTANTE_CHAR:
        case CONSTANTE_STRING:{
          VALOR(null);
          break;
          }
        default:
          jj_la1[47] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(FP);
        jj_consume_token(ACHAVE);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CASE:{
            ;
            break;
            }
          default:
            jj_la1[48] = jj_gen;
            break label_8;
          }
          CASO(null);
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DEFAUL:{
          CASO_DEFAULT(null);
          break;
          }
        default:
          jj_la1[49] = jj_gen;
          ;
        }
        jj_consume_token(FCHAVE);
      } catch (ParseException e) {
consumeUntil(f,e,"Buscar Switch");
      }
    } finally {
      trace_return("BUSCAR_SWITCH");
    }
  }

  final public void CASO(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("CASO");
    try {
      jj_consume_token(CASE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFICADOR:{
        jj_consume_token(IDENTIFICADOR);
        break;
        }
      case INTEIRO:
      case DECIMAL:
      case TRUE:
      case FALSE:
      case CONSTANTE_CHAR:
      case CONSTANTE_STRING:{
        VALOR(null);
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(DP);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ACHAVE:{
        jj_consume_token(ACHAVE);
        LINHAS_CODIGO(g);
        jj_consume_token(BREAK);
        jj_consume_token(PV);
        jj_consume_token(FCHAVE);
        break;
        }
      case IF:
      case FOR:
      case WHILE:
      case DO:
      case SWITCH:
      case BREAK:
      case CHAR:
      case INT:
      case FLOAT:
      case BOOLEAN:
      case STRING:
      case DOUBLE:
      case SOMA:
      case SUBTRACAO:
      case MULTIPLICACAO:
      case DIVISAO:
      case IDENTIFICADOR:{
        LINHAS_CODIGO(g);
        jj_consume_token(BREAK);
        jj_consume_token(PV);
        break;
        }
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("CASO");
    }
  }

  final public void CASO_DEFAULT(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("CASO_DEFAULT");
    try {
      jj_consume_token(DEFAUL);
      jj_consume_token(DP);
      LINHAS_CODIGO(g);
    } finally {
      trace_return("CASO_DEFAULT");
    }
  }

  final public void BUSCAR_WHILE(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("BUSCAR_WHILE");
    try {RecoverySet f = First.buscarwhile;
      try {
        jj_consume_token(WHILE);
        CONDICAO(g);
        jj_consume_token(ACHAVE);
        LINHAS_CODIGO(g);
        jj_consume_token(FCHAVE);
      } catch (ParseException e) {
consumeUntil(f,e,"Buscar While");
      }
    } finally {
      trace_return("BUSCAR_WHILE");
    }
  }

  final public void BUSCAR_DO_WHILE(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("BUSCAR_DO_WHILE");
    try {RecoverySet f = First.buscardowhile;
      try {
        jj_consume_token(DO);
        jj_consume_token(ACHAVE);
        LINHAS_CODIGO(g);
        jj_consume_token(FCHAVE);
        jj_consume_token(WHILE);
        CONDICAO(g);
        jj_consume_token(PV);
      } catch (ParseException e) {
consumeUntil(f,e,"Buscar do While");
      }
    } finally {
      trace_return("BUSCAR_DO_WHILE");
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_9()
 {
    if (!jj_rescan) trace_call("CONDICAO_SENAO_SE(LOOKING AHEAD...)");
    if (jj_scan_token(ELSE)) { if (!jj_rescan) trace_return("CONDICAO_SENAO_SE(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(IF)) { if (!jj_rescan) trace_return("CONDICAO_SENAO_SE(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("CONDICAO_SENAO_SE(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_1()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public Scanner_1TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[52];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x23a01,0x23a01,0x23a01,0x23a00,0x0,0x23a00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x23a00,0x0,0x0,0x23a00,0x0,0x0,0x0,0x0,0x0,0x23a00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x10ba000,0x10ba000,0x0,0x0,0x1000000,0x0,0x10ba000,0x10ba000,0x10ba000,0x100,0x1000000,0x200,0x0,0x0,0x200,0x0,0x0,0x800,0x800,0x0,0x102,0x800,0x800,0x4,0x10ba000,0x0,0x2,0x102,0x200,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x40000,0x80000000,0x0,0x11ba020,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x4000079f,0x4000079f,0x0,0x0,0x1f,0x0,0x4000079f,0x4000079f,0x4000079f,0x0,0x1f,0x7f000000,0x40000780,0x780,0x7f000000,0x4000,0x0,0x0,0x0,0x0,0xb,0x0,0x0,0x40000000,0x4000079f,0x0,0xb,0xb,0x7f000000,0x40000780,0x7f000000,0x40000780,0x780,0xc000000,0x3f000000,0x7f000000,0x60,0x0,0x7f000000,0x7f000000,0x780000,0x780000,0x7b000,0x0,0x7f000000,0x7f000000,0x60,0x7f000000,0x0,0x0,0x7f000000,0x4000079f,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Scanner_1(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Scanner_1(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Scanner_1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Scanner_1(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Scanner_1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Scanner_1(Scanner_1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(Scanner_1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    } else {
      trace_scan(jj_scanpos, kind);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[101];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 52; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 101; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
