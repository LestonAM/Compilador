/* Generated By:JavaCC: Do not edit this line. Scanner_1Constants.java */
package Compilador;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface Scanner_1Constants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMENTARIO = 5;
  /** RegularExpression Id. */
  int COMENTARIOS = 6;
  /** RegularExpression Id. */
  int COM = 7;
  /** RegularExpression Id. */
  int EOL = 8;
  /** RegularExpression Id. */
  int PUBLIC = 9;
  /** RegularExpression Id. */
  int NEW = 10;
  /** RegularExpression Id. */
  int STATIC = 11;
  /** RegularExpression Id. */
  int PRIVATE = 12;
  /** RegularExpression Id. */
  int PROTECTED = 13;
  /** RegularExpression Id. */
  int FINAL = 14;
  /** RegularExpression Id. */
  int NATIVE = 15;
  /** RegularExpression Id. */
  int EXTENDS = 16;
  /** RegularExpression Id. */
  int ABSTRACT = 17;
  /** RegularExpression Id. */
  int RAIZ = 18;
  /** RegularExpression Id. */
  int INTERROG = 19;
  /** RegularExpression Id. */
  int TIO = 20;
  /** RegularExpression Id. */
  int BYTE = 21;
  /** RegularExpression Id. */
  int LONG = 22;
  /** RegularExpression Id. */
  int TRANSIENTE = 23;
  /** RegularExpression Id. */
  int THREADSAFE = 24;
  /** RegularExpression Id. */
  int IMPLEMENTS = 25;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 26;
  /** RegularExpression Id. */
  int TRY = 27;
  /** RegularExpression Id. */
  int CATCH = 28;
  /** RegularExpression Id. */
  int FINALLY = 29;
  /** RegularExpression Id. */
  int INTERFACE = 30;
  /** RegularExpression Id. */
  int CLASS = 31;
  /** RegularExpression Id. */
  int ARGS = 32;
  /** RegularExpression Id. */
  int VOID = 33;
  /** RegularExpression Id. */
  int MAIN = 34;
  /** RegularExpression Id. */
  int PONTO = 35;
  /** RegularExpression Id. */
  int DP = 36;
  /** RegularExpression Id. */
  int ACHAVE = 37;
  /** RegularExpression Id. */
  int FCHAVE = 38;
  /** RegularExpression Id. */
  int PV = 39;
  /** RegularExpression Id. */
  int V = 40;
  /** RegularExpression Id. */
  int AP = 41;
  /** RegularExpression Id. */
  int FP = 42;
  /** RegularExpression Id. */
  int ACOLCHETE = 43;
  /** RegularExpression Id. */
  int FCOLCHETE = 44;
  /** RegularExpression Id. */
  int IF = 45;
  /** RegularExpression Id. */
  int ELSE = 46;
  /** RegularExpression Id. */
  int FOR = 47;
  /** RegularExpression Id. */
  int WHILE = 48;
  /** RegularExpression Id. */
  int DO = 49;
  /** RegularExpression Id. */
  int CASE = 50;
  /** RegularExpression Id. */
  int SWITCH = 51;
  /** RegularExpression Id. */
  int BREAK = 52;
  /** RegularExpression Id. */
  int INSTANCEOF = 53;
  /** RegularExpression Id. */
  int NULL = 54;
  /** RegularExpression Id. */
  int THIS = 55;
  /** RegularExpression Id. */
  int CHAR = 56;
  /** RegularExpression Id. */
  int SUPER = 57;
  /** RegularExpression Id. */
  int SHORT = 58;
  /** RegularExpression Id. */
  int THROW = 59;
  /** RegularExpression Id. */
  int RETURN = 60;
  /** RegularExpression Id. */
  int CONTINUE = 61;
  /** RegularExpression Id. */
  int AMPERSAND = 62;
  /** RegularExpression Id. */
  int DEFAUL = 63;
  /** RegularExpression Id. */
  int INT = 64;
  /** RegularExpression Id. */
  int FLOAT = 65;
  /** RegularExpression Id. */
  int BOOLEAN = 66;
  /** RegularExpression Id. */
  int STRING = 67;
  /** RegularExpression Id. */
  int DOUBLE = 68;
  /** RegularExpression Id. */
  int INCREMENTAR = 69;
  /** RegularExpression Id. */
  int DECREMENTAR = 70;
  /** RegularExpression Id. */
  int SOMA = 71;
  /** RegularExpression Id. */
  int SUBTRACAO = 72;
  /** RegularExpression Id. */
  int MULTIPLICACAO = 73;
  /** RegularExpression Id. */
  int DIVISAO = 74;
  /** RegularExpression Id. */
  int RESTO = 75;
  /** RegularExpression Id. */
  int MENORQ = 76;
  /** RegularExpression Id. */
  int MAIORQ = 77;
  /** RegularExpression Id. */
  int OP_ATRIBUICAO_IGUAL = 78;
  /** RegularExpression Id. */
  int MAIORIGUAL = 79;
  /** RegularExpression Id. */
  int MENORIGUAL = 80;
  /** RegularExpression Id. */
  int DIFERENTE = 81;
  /** RegularExpression Id. */
  int IGUAL = 82;
  /** RegularExpression Id. */
  int E = 83;
  /** RegularExpression Id. */
  int EE = 84;
  /** RegularExpression Id. */
  int OU = 85;
  /** RegularExpression Id. */
  int OUU = 86;
  /** RegularExpression Id. */
  int NEGACAO = 87;
  /** RegularExpression Id. */
  int INTEIRO = 88;
  /** RegularExpression Id. */
  int DECIMAL = 89;
  /** RegularExpression Id. */
  int TRUE = 90;
  /** RegularExpression Id. */
  int FALSE = 91;
  /** RegularExpression Id. */
  int CONSTANTE_CHAR = 92;
  /** RegularExpression Id. */
  int CONSTANTE_STRING = 93;
  /** RegularExpression Id. */
  int IDENTIFICADOR = 94;
  /** RegularExpression Id. */
  int LETRA = 95;
  /** RegularExpression Id. */
  int DIGITO = 96;
  /** RegularExpression Id. */
  int ID_INVALIDO = 97;
  /** RegularExpression Id. */
  int INVALIDO_LEXICO = 98;
  /** RegularExpression Id. */
  int INVALID_CONST = 99;
  /** RegularExpression Id. */
  int INVALID_CONSTANTE_CHAR = 100;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<COMENTARIO>",
    "<COMENTARIOS>",
    "<COM>",
    "<EOL>",
    "\"public\"",
    "\"new\"",
    "\"static\"",
    "\"private\"",
    "\"protected\"",
    "\"final\"",
    "\"native\"",
    "\"extends\"",
    "\"abstract\"",
    "\"^\"",
    "\"?\"",
    "\"~\"",
    "\"byte\"",
    "\"long\"",
    "\"transient\"",
    "\"threadsafe\"",
    "\"implements\"",
    "\"synchronized\"",
    "\"try\"",
    "\"catch\"",
    "\"finally\"",
    "\"interface\"",
    "\"class\"",
    "\"args\"",
    "\"void\"",
    "\"main\"",
    "\".\"",
    "\":\"",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"if\"",
    "\"else\"",
    "\"for\"",
    "\"while\"",
    "\"do\"",
    "\"case\"",
    "\"switch\"",
    "\"break\"",
    "\"instanceof\"",
    "\"null\"",
    "\"this\"",
    "\"char\"",
    "\"super\"",
    "\"short\"",
    "\"throw\"",
    "\"return\"",
    "\"continue\"",
    "\"ampersand\"",
    "\"default\"",
    "\"int\"",
    "\"float\"",
    "\"boolean\"",
    "\"String\"",
    "\"double\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"<\"",
    "\">\"",
    "\"=\"",
    "\">=\"",
    "\"<=\"",
    "\"!=\"",
    "\"==\"",
    "\"&\"",
    "\"&&\"",
    "\"||\"",
    "\"|\"",
    "\"!\"",
    "<INTEIRO>",
    "<DECIMAL>",
    "\"true\"",
    "\"false\"",
    "<CONSTANTE_CHAR>",
    "<CONSTANTE_STRING>",
    "<IDENTIFICADOR>",
    "<LETRA>",
    "<DIGITO>",
    "<ID_INVALIDO>",
    "<INVALIDO_LEXICO>",
    "<INVALID_CONST>",
    "<INVALID_CONSTANTE_CHAR>",
  };

}
