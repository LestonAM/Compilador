/* Scanner_1TokenManager.java */
/* Generated By:JavaCC: Do not edit this line. Scanner_1TokenManager.java */
package Compilador;
import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;

/** Token Manager. */
@SuppressWarnings("unused")public class Scanner_1TokenManager implements Scanner_1Constants {
AnalizarLexico analizarlexico;

static int countLexError = 0;
int countParserError = 0;
public int foundLexError()
{
   return countLexError;
}
public int foundParserError()
{
   return countParserError;
}

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x820340L) != 0L)
            return 6;
         if ((active1 & 0xa0L) != 0L)
            return 8;
         if ((active1 & 0x400L) != 0L)
            return 11;
         if ((active1 & 0x180000L) != 0L)
            return 53;
         if ((active0 & 0xffffe007ffe3fe00L) != 0L || (active1 & 0xc00001fL) != 0L)
         {
            jjmatchedKind = 94;
            return 54;
         }
         if ((active0 & 0x10001c0000L) != 0L || (active1 & 0x600000L) != 0L)
            return 9;
         return -1;
      case 1:
         if ((active0 & 0xfffdc007ffe3fe00L) != 0L || (active1 & 0xc00000fL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 94;
               jjmatchedPos = 1;
            }
            return 54;
         }
         if ((active1 & 0x300000L) != 0L)
            return 9;
         if ((active0 & 0x2200000000000L) != 0L || (active1 & 0x10L) != 0L)
            return 54;
         return -1;
      case 2:
         if ((active0 & 0xfffd4007b7e3fa00L) != 0L || (active1 & 0xc00001eL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 94;
               jjmatchedPos = 2;
            }
            return 54;
         }
         if ((active0 & 0x800048000400L) != 0L || (active1 & 0x1L) != 0L)
            return 54;
         return -1;
      case 3:
         if ((active0 & 0xfe390000f783fa00L) != 0L || (active1 & 0x800001eL) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 3;
            return 54;
         }
         if ((active0 & 0x1c4400700600000L) != 0L || (active1 & 0x4000000L) != 0L)
            return 54;
         return -1;
      case 4:
         if ((active0 & 0xf02800004783ba00L) != 0L || (active1 & 0x1cL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 94;
               jjmatchedPos = 4;
            }
            return 54;
         }
         if ((active0 & 0xe110000b0004000L) != 0L || (active1 & 0x8000002L) != 0L)
            return 54;
         return -1;
      case 5:
         if ((active0 & 0xe020000067833000L) != 0L || (active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 5;
            return 54;
         }
         if ((active0 & 0x1008000000008a00L) != 0L || (active1 & 0x18L) != 0L)
            return 54;
         return -1;
      case 6:
         if ((active0 & 0x6020000047822000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 6;
            return 54;
         }
         if ((active0 & 0x8000000020011000L) != 0L || (active1 & 0x4L) != 0L)
            return 54;
         return -1;
      case 7:
         if ((active0 & 0x2000000000020000L) != 0L)
            return 54;
         if ((active0 & 0x4020000047802000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 7;
            return 54;
         }
         return -1;
      case 8:
         if ((active0 & 0x20000007000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 8;
            return 54;
         }
         if ((active0 & 0x4000000040802000L) != 0L)
            return 54;
         return -1;
      case 9:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 9;
            return 54;
         }
         if ((active0 & 0x20000003000000L) != 0L)
            return 54;
         return -1;
      case 10:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 10;
            return 54;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 32:
         return jjStopAtPos(0, 1);
      case 33:
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L);
      case 37:
         return jjStopAtPos(0, 75);
      case 38:
         jjmatchedKind = 83;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L);
      case 40:
         return jjStopAtPos(0, 41);
      case 41:
         return jjStopAtPos(0, 42);
      case 42:
         return jjStartNfaWithStates_0(0, 73, 6);
      case 43:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 44:
         return jjStopAtPos(0, 40);
      case 45:
         jjmatchedKind = 72;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L);
      case 46:
         return jjStopAtPos(0, 35);
      case 47:
         return jjStartNfaWithStates_0(0, 74, 11);
      case 58:
         return jjStartNfaWithStates_0(0, 36, 9);
      case 59:
         return jjStopAtPos(0, 39);
      case 60:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 61:
         jjmatchedKind = 78;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      case 62:
         jjmatchedKind = 77;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 63:
         return jjStartNfaWithStates_0(0, 19, 9);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 91:
         return jjStopAtPos(0, 43);
      case 93:
         return jjStopAtPos(0, 44);
      case 94:
         return jjStartNfaWithStates_0(0, 18, 9);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x4000000100020000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x10000000200000L, 0x4L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x2104000090000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x8002000000000000L, 0x10L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x400000010000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x800020004000L, 0x8000002L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x20200042000000L, 0x1L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x40000000008400L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x3200L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x608000004000800L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x880000009800000L, 0x4000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 37);
      case 124:
         jjmatchedKind = 86;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000L);
      case 125:
         return jjStopAtPos(0, 38);
      case 126:
         return jjStartNfaWithStates_0(0, 20, 9);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 84, 9);
         break;
      case 43:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         break;
      case 45:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         break;
      case 61:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         else if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         else if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000410008000L, active1, 0x8000000L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x9000000000000400L, active1, 0L);
      case 102:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 45, 54);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0xd81000001000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x20004000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x400080000000L, active1, 0x2L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000002000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000040000000L, active1, 0x1L);
      case 111:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2000800200400000L, active1, 0x14L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000108803000L, active1, 0x4000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0x8L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x240000000000200L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x4200000L, active1, 0L);
      case 124:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 85, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000080800800L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x89000600001000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0x8000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000024404000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000002000L, active1, 0x6L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4200000002000000L, active1, 0L);
      case 114:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 47, 54);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000001000000L, active1, 0x8L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x24400000020000L, active1, 0L);
      case 116:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000050218000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000010L);
      case 119:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 54);
         break;
      case 121:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 27, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8010000020004000L, active1, 0x2L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x14000000L, active1, 0L);
      case 100:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 54);
         break;
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 54);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 54);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 54);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 90, 54);
         return jjMoveStringLiteralDfa4_0(active0, 0x4200000041010000L, active1, 0L);
      case 103:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 54);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L, active1, 0x8L);
      case 108:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 54);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000002000200L, active1, 0x4L);
      case 110:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 54);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 54);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 54);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 54);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0x8000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x2028000000022800L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000001001000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 54);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 91, 54);
         return jjMoveStringLiteralDfa5_0(active0, 0x2002000L, active1, 0x4L);
      case 104:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 54);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000a00L, active1, 0L);
      case 107:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 54);
         break;
      case 108:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0x10L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L, active1, 0x8L);
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 54);
         return jjMoveStringLiteralDfa5_0(active0, 0x5000000040020000L, active1, 0L);
      case 115:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 54);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0L);
      case 116:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 54);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 65, 54);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L, active1, 0L);
      case 119:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L, active1, 0x4L);
      case 99:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 54);
         else if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 54);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x1010000L, active1, 0L);
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 54);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 54);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L, active1, 0L);
      case 103:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 54);
         break;
      case 104:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 54);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000020000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L, active1, 0L);
      case 110:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 54);
         return jjMoveStringLiteralDfa6_0(active0, 0x2020000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000040000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000020000L, active1, 0L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 54);
         return jjMoveStringLiteralDfa7_0(active0, 0x2800000L, active1, 0L);
      case 110:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 54);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L, active1, 0L);
      case 115:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 54);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L, active1, 0L);
      case 116:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 63, 54);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L);
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 61, 54);
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000002000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000006800000L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 13, 54);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 62, 54);
         break;
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 30, 54);
         break;
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000000L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(8, 23, 54);
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(9, 24, 54);
         break;
      case 102:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 53, 54);
         break;
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(9, 25, 54);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(11, 26, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 53;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if (curChar == 42)
                     { jjCheckNAddStates(0, 3); }
                  else if (curChar == 47)
                  {
                     if (kind > 5)
                        kind = 5;
                     { jjCheckNAddTwoStates(12, 13); }
                  }
                  break;
               case 53:
                  if ((0x840000d8ffffc9ffL & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAdd(9); }
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 97)
                        kind = 97;
                     { jjCheckNAdd(6); }
                  }
                  break;
               case 0:
                  if ((0x840000d8ffffc9ffL & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAdd(9); }
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 88)
                        kind = 88;
                     { jjCheckNAddStates(4, 6); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(7, 11); }
                  else if (curChar == 47)
                     { jjAddStates(12, 13); }
                  else if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 32)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  if ((0x3ff244a00000000L & l) != 0L)
                  {
                     if (kind > 97)
                        kind = 97;
                     { jjCheckNAdd(6); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(14, 18); }
                  else if (curChar == 36)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 94)
                        kind = 94;
                     { jjCheckNAddTwoStates(3, 4); }
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 94)
                        kind = 94;
                  }
                  break;
               case 1:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 4:
                  if (curChar == 36 && kind > 94)
                     kind = 94;
                  break;
               case 5:
                  if ((0x3ff244a00000000L & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  { jjCheckNAdd(6); }
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  { jjCheckNAdd(6); }
                  break;
               case 7:
                  if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if (curChar != 61)
                     break;
                  if (kind > 97)
                     kind = 97;
                  { jjCheckNAdd(6); }
                  break;
               case 9:
                  if ((0x840000d8ffffc9ffL & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAdd(9); }
                  break;
               case 10:
                  if (curChar == 47)
                     { jjAddStates(12, 13); }
                  break;
               case 12:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 14:
                  if ((0x8400002400L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 15:
                  if (curChar != 10)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 16:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 42)
                     { jjCheckNAddStates(0, 3); }
                  break;
               case 18:
                  if ((0x2400L & l) != 0L)
                     { jjCheckNAddStates(0, 3); }
                  break;
               case 19:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(0, 3); }
                  break;
               case 21:
                  if ((0x8400002400L & l) != 0L)
                     { jjCheckNAddStates(0, 3); }
                  break;
               case 22:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 23:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 10)
                     { jjCheckNAddStates(0, 3); }
                  break;
               case 25:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  { jjCheckNAddStates(4, 6); }
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  { jjCheckNAdd(27); }
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(28, 29); }
                  break;
               case 29:
                  if (curChar == 46)
                     { jjCheckNAdd(30); }
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  { jjCheckNAdd(30); }
                  break;
               case 31:
                  if (curChar == 39)
                     { jjCheckNAddStates(14, 18); }
                  break;
               case 32:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAdd(33); }
                  break;
               case 33:
                  if (curChar == 39 && kind > 92)
                     kind = 92;
                  break;
               case 35:
                  if ((0x400002400L & l) != 0L)
                     { jjCheckNAdd(33); }
                  break;
               case 36:
                  if (curChar == 10)
                     { jjCheckNAdd(33); }
                  break;
               case 37:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(19, 21); }
                  break;
               case 40:
                  if ((0x400002400L & l) != 0L)
                     { jjCheckNAddStates(19, 21); }
                  break;
               case 41:
                  if (curChar == 39 && kind > 100)
                     kind = 100;
                  break;
               case 42:
                  if (curChar == 10)
                     { jjCheckNAddStates(19, 21); }
                  break;
               case 43:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 34)
                     { jjCheckNAddStates(7, 11); }
                  break;
               case 45:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 47:
                  if ((0x8400002400L & l) != 0L)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 48:
                  if (curChar == 34 && kind > 93)
                     kind = 93;
                  break;
               case 49:
                  if (curChar == 10)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 50:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(51, 52); }
                  break;
               case 52:
                  if ((0x2400L & l) != 0L && kind > 99)
                     kind = 99;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 53:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 97)
                        kind = 97;
                     { jjCheckNAdd(6); }
                  }
                  if ((0xd0000001d0000001L & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAdd(9); }
                  }
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 94)
                        kind = 94;
                     { jjCheckNAddTwoStates(3, 4); }
                  }
                  else if ((0xd0000001d0000001L & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAdd(9); }
                  }
                  if (curChar == 64)
                  {
                     if (kind > 97)
                        kind = 97;
                     { jjCheckNAdd(6); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 54:
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 1:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 5:
                  if (curChar != 64)
                     break;
                  if (kind > 97)
                     kind = 97;
                  { jjCheckNAdd(6); }
                  break;
               case 6:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  { jjCheckNAdd(6); }
                  break;
               case 9:
                  if ((0xd0000001d0000001L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAdd(9); }
                  break;
               case 12:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 13:
                  if (curChar == 92)
                     { jjAddStates(25, 26); }
                  break;
               case 14:
                  if ((0x14404410000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 19:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 3); }
                  break;
               case 20:
                  if (curChar == 92)
                     { jjAddStates(27, 28); }
                  break;
               case 21:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(0, 3); }
                  break;
               case 32:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAdd(33); }
                  break;
               case 34:
                  if (curChar == 92)
                     { jjAddStates(29, 30); }
                  break;
               case 35:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAdd(33); }
                  break;
               case 38:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(19, 21); }
                  break;
               case 39:
                  if (curChar == 92)
                     { jjAddStates(31, 32); }
                  break;
               case 40:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(19, 21); }
                  break;
               case 45:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 46:
                  if (curChar == 92)
                     { jjAddStates(33, 34); }
                  break;
               case 47:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 51:
                  { jjAddStates(35, 36); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 53:
               case 9:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAdd(9); }
                  break;
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAdd(9); }
                  break;
               case 12:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjAddStates(37, 38); }
                  break;
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(0, 3); }
                  break;
               case 32:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 38:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(19, 21); }
                  break;
               case 45:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(22, 24); }
                  break;
               case 51:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(35, 36); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 53 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   18, 19, 20, 23, 27, 28, 29, 45, 46, 48, 51, 52, 11, 17, 32, 34, 
   38, 39, 41, 38, 39, 41, 45, 46, 48, 14, 16, 21, 25, 35, 37, 40, 
   43, 47, 50, 51, 52, 12, 13, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, 
"\160\165\142\154\151\143", "\156\145\167", "\163\164\141\164\151\143", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\146\151\156\141\154", "\156\141\164\151\166\145", 
"\145\170\164\145\156\144\163", "\141\142\163\164\162\141\143\164", "\136", "\77", "\176", "\142\171\164\145", 
"\154\157\156\147", "\164\162\141\156\163\151\145\156\164", 
"\164\150\162\145\141\144\163\141\146\145", "\151\155\160\154\145\155\145\156\164\163", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\164\162\171", "\143\141\164\143\150", "\146\151\156\141\154\154\171", 
"\151\156\164\145\162\146\141\143\145", "\143\154\141\163\163", "\141\162\147\163", "\166\157\151\144", 
"\155\141\151\156", "\56", "\72", "\173", "\175", "\73", "\54", "\50", "\51", "\133", "\135", 
"\151\146", "\145\154\163\145", "\146\157\162", "\167\150\151\154\145", "\144\157", 
"\143\141\163\145", "\163\167\151\164\143\150", "\142\162\145\141\153", 
"\151\156\163\164\141\156\143\145\157\146", "\156\165\154\154", "\164\150\151\163", "\143\150\141\162", 
"\163\165\160\145\162", "\163\150\157\162\164", "\164\150\162\157\167", "\162\145\164\165\162\156", 
"\143\157\156\164\151\156\165\145", "\141\155\160\145\162\163\141\156\144", "\144\145\146\141\165\154\164", 
"\151\156\164", "\146\154\157\141\164", "\142\157\157\154\145\141\156", 
"\123\164\162\151\156\147", "\144\157\165\142\154\145", "\53\53", "\55\55", "\53", "\55", "\52", "\57", 
"\45", "\74", "\76", "\75", "\76\75", "\74\75", "\41\75", "\75\75", "\46", "\46\46", 
"\174\174", "\174", "\41", null, null, "\164\162\165\145", "\146\141\154\163\145", null, 
null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 13 && (0x2600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
            SkipLexicalActions(matchedToken);
         }
         else
            SkipLexicalActions(null);
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 97 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                     System.out.println("IDENTIFICADOR: "+image);
                                     countLexError++;
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cn\u005cnErro lexico -------->  Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+" "+image +"\u005cn");
         break;
      case 98 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
     System.err.println("Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+" Caractere invalido encontrado: " + image + "TOTAL ERRO "+countLexError);
                          countLexError++;
                          System.out.println("Erro Lexico --------> "+image);
                          analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cn\u005cnErro lexico -------->  Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+" "+image +"\u005cn");
         break;
      case 99 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                      System.err.println("Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+" Caractere invalido encontrado \u005c\u005cn: " + image+" Era esperado uma aspa");
                                     countLexError++;
                                     System.out.println("Erro Lexico --------> "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cn\u005cnErro lexico -------->  Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+" "+image+"\u005cn");
         break;
      case 100 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                     System.out.println("Erro lexico: --------> "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cn\u005cnErro lexico: --------> "+image);
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 9 :
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
                                     System.out.println("Palavra Reservada: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnTIPO DE PROTECAO: "+image);
         break;
      case 10 :
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
                                     System.out.println("Palavra Reservada: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPALAVRA RESERVADA: "+image);
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
                                     System.out.println("Palavra Reservada: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnTIPO DE PROTECAO: "+image);
         break;
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
                                     System.out.println("Palavra Reservada: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnTIPO DE PROTECAO: "+image);
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
                                     System.out.println("Palavra Reservada: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnTIPO DE PROTECAO: "+image);
         break;
      case 14 :
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
                                     System.out.println("Palavra Reservada: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnTIPO DE PROTECAO: "+image);
         break;
      case 15 :
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
                                     System.out.println("Palavra Reservada: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPalavra Reservada: "+image);
         break;
      case 16 :
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
                                     System.out.println("Palavra Reservada: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPalavra Reservada: "+image);
         break;
      case 17 :
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
                                     System.out.println("Palavra Reservada: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPalavra Reservada: "+image);
         break;
      case 18 :
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
                                     System.out.println("Palavra Reservada: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnOPERADOR DE POTENCIA: "+image);
         break;
      case 19 :
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
                                     System.out.println("Palavra Reservada: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPalavra Reservada: "+image);
         break;
      case 20 :
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
                                     System.out.println("Palavra Reservada: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPalavra Reservada: "+image);
         break;
      case 21 :
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
                                     System.out.println("Palavra Reservada: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnTIPO PRIMITIVO BYTE: "+image);
         break;
      case 22 :
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
                                     System.out.println("Palavra Reservada: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnTIPO PRIMITIVO LONG: "+image);
         break;
      case 23 :
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
                                     System.out.println("Palavra Reservada: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPalavra Reservada: "+image);
         break;
      case 24 :
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
                                     System.out.println("Palavra Reservada: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPalavra Reservada: "+image);
         break;
      case 25 :
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
                                     System.out.println("Palavra Reservada: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPalavra Reservada: "+image);
         break;
      case 26 :
        image.append(jjstrLiteralImages[26]);
        lengthOfMatch = jjstrLiteralImages[26].length();
                                     System.out.println("Palavra Reservada: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPalavra Reservada: "+image);
         break;
      case 27 :
        image.append(jjstrLiteralImages[27]);
        lengthOfMatch = jjstrLiteralImages[27].length();
                                     System.out.println("Palavra Reservada: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPalavra Reservada: "+image);
         break;
      case 28 :
        image.append(jjstrLiteralImages[28]);
        lengthOfMatch = jjstrLiteralImages[28].length();
                                     System.out.println("Palavra Reservada: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPalavra Reservada: "+image);
         break;
      case 29 :
        image.append(jjstrLiteralImages[29]);
        lengthOfMatch = jjstrLiteralImages[29].length();
                                     System.out.println("Palavra Reservada: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPalavra Reservada: "+image);
         break;
      case 30 :
        image.append(jjstrLiteralImages[30]);
        lengthOfMatch = jjstrLiteralImages[30].length();
                                     System.out.println("Palavra Reservada: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPalavra Reservada: "+image);
         break;
      case 31 :
        image.append(jjstrLiteralImages[31]);
        lengthOfMatch = jjstrLiteralImages[31].length();
                                     System.out.println("Palavra Reservada: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPalavra Reservada: "+image);
         break;
      case 32 :
        image.append(jjstrLiteralImages[32]);
        lengthOfMatch = jjstrLiteralImages[32].length();
                                     System.out.println("Palavra Reservada: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPalavra Reservada: "+image);
         break;
      case 33 :
        image.append(jjstrLiteralImages[33]);
        lengthOfMatch = jjstrLiteralImages[33].length();
                                     System.out.println("VOID: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnTIPO DE RETORNO VOID: "+image);
         break;
      case 34 :
        image.append(jjstrLiteralImages[34]);
        lengthOfMatch = jjstrLiteralImages[34].length();
                                     System.out.println("MAIN: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPALAVRA RESERVADA: "+image);
         break;
      case 35 :
        image.append(jjstrLiteralImages[35]);
        lengthOfMatch = jjstrLiteralImages[35].length();
                                     System.out.println("PONTO: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"DELIMITADOR PONTO: "+image+"\u005cn");
         break;
      case 36 :
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
                                     System.out.println("DP: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnDELIMITADOR DP: "+image);
         break;
      case 37 :
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
                                     System.out.println("ACHAVE: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnDELIMITADOR ACHAVE: "+image);
         break;
      case 38 :
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
                                     System.out.println("FCHAVE: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnDELIMITADOR FCHAVE: "+image);
         break;
      case 39 :
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
                                     System.out.println("PV: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnDELIMITADOR PV: "+image);
         break;
      case 40 :
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
                                     System.out.println("V: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnDELIMITADOR V: "+image);
         break;
      case 41 :
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
                                     System.out.println("AP: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnDELIMITADOR AP: "+image);
         break;
      case 42 :
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
                                     System.out.println("FP: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnDELIMITADOR FP: "+image);
         break;
      case 43 :
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
                                     System.out.println("ACOLCHETE: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnDELIMITADOR ACOLCHETE: "+image);
         break;
      case 44 :
        image.append(jjstrLiteralImages[44]);
        lengthOfMatch = jjstrLiteralImages[44].length();
                                     System.out.println("FCOLCHETE: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnDELIMITADOR FCOLCHETE: "+image);
         break;
      case 45 :
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
                                     System.out.println("IF: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPALAVRA RESERVADA IF: "+image);
         break;
      case 46 :
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
                                     System.out.println("ELSE: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPALAVRA RESERVADA ELSE: "+image);
         break;
      case 47 :
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
                                     System.out.println("FOR: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPALAVRA RESERVADA FOR: "+image);
         break;
      case 48 :
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
                                     System.out.println("WHILE: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPALAVRA RESERVADA WHILE: "+image);
         break;
      case 49 :
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
                                     System.out.println("DO: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPALAVRA RESERVADA DO: "+image);
         break;
      case 50 :
        image.append(jjstrLiteralImages[50]);
        lengthOfMatch = jjstrLiteralImages[50].length();
                                     System.out.println("CASE: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPALAVRA RESERVADA CASE: "+image);
         break;
      case 51 :
        image.append(jjstrLiteralImages[51]);
        lengthOfMatch = jjstrLiteralImages[51].length();
                                     System.out.println("SWITCH: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPALAVRA RESERVADA SWITCH: "+image);
         break;
      case 52 :
        image.append(jjstrLiteralImages[52]);
        lengthOfMatch = jjstrLiteralImages[52].length();
                                     System.out.println("BREAK: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnCONT. DE FLUXO BREAK: "+image);
         break;
      case 53 :
        image.append(jjstrLiteralImages[53]);
        lengthOfMatch = jjstrLiteralImages[53].length();
                                     System.out.println("INSTANCEOF: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnINSTANCEOF: "+image);
         break;
      case 54 :
        image.append(jjstrLiteralImages[54]);
        lengthOfMatch = jjstrLiteralImages[54].length();
                                     System.out.println("NULL: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnCONST. NULL: "+image);
         break;
      case 55 :
        image.append(jjstrLiteralImages[55]);
        lengthOfMatch = jjstrLiteralImages[55].length();
                                     System.out.println("THIS: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnTHIS: "+image);
         break;
      case 56 :
        image.append(jjstrLiteralImages[56]);
        lengthOfMatch = jjstrLiteralImages[56].length();
                                     System.out.println("CHAR: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnTIPO TEXTUAL CHAR: "+image);
         break;
      case 57 :
        image.append(jjstrLiteralImages[57]);
        lengthOfMatch = jjstrLiteralImages[57].length();
                                     System.out.println("SUPER: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPALAVRA RESERVADA SUPER: "+image);
         break;
      case 58 :
        image.append(jjstrLiteralImages[58]);
        lengthOfMatch = jjstrLiteralImages[58].length();
                                     System.out.println("SHORT: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPALAVRA RESERVADA SHORT: "+image);
         break;
      case 59 :
        image.append(jjstrLiteralImages[59]);
        lengthOfMatch = jjstrLiteralImages[59].length();
                                     System.out.println("THROW: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPALAVRA RESERVADA THROW: "+image);
         break;
      case 60 :
        image.append(jjstrLiteralImages[60]);
        lengthOfMatch = jjstrLiteralImages[60].length();
                                     System.out.println("RETURN: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPALAVRA RESERVADA RETURN: "+image);
         break;
      case 61 :
        image.append(jjstrLiteralImages[61]);
        lengthOfMatch = jjstrLiteralImages[61].length();
                                     System.out.println("CONTINUE: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnCONT. DE FLUXO CONTINUE: "+image);
         break;
      case 62 :
        image.append(jjstrLiteralImages[62]);
        lengthOfMatch = jjstrLiteralImages[62].length();
                                     System.out.println("AMPERSAND: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPALAVRA RESERVADA AMPERSAND: "+image);
         break;
      case 63 :
        image.append(jjstrLiteralImages[63]);
        lengthOfMatch = jjstrLiteralImages[63].length();
                                     System.out.println("DEFAULT: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnPALAVRA RESERVADA DEFAULT: "+image);
         break;
      case 64 :
        image.append(jjstrLiteralImages[64]);
        lengthOfMatch = jjstrLiteralImages[64].length();
                                     System.out.println("INT: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnTIPO PRIMITIVO INT: "+image);
         break;
      case 65 :
        image.append(jjstrLiteralImages[65]);
        lengthOfMatch = jjstrLiteralImages[65].length();
                                     System.out.println("FLOAT: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnTIPO PRIMITIVO FLOAT: "+image);
         break;
      case 66 :
        image.append(jjstrLiteralImages[66]);
        lengthOfMatch = jjstrLiteralImages[66].length();
                                     System.out.println("BOOLEAN: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnTIPO LOGICO BOOLEAN: "+image);
         break;
      case 67 :
        image.append(jjstrLiteralImages[67]);
        lengthOfMatch = jjstrLiteralImages[67].length();
                                     System.out.println("STRING: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnTIPO TEXTUAL STRING: "+image);
         break;
      case 68 :
        image.append(jjstrLiteralImages[68]);
        lengthOfMatch = jjstrLiteralImages[68].length();
                                     System.out.println("DOUBLE: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnTIPO PRIMITIVO DOUBLE: "+image);
         break;
      case 69 :
        image.append(jjstrLiteralImages[69]);
        lengthOfMatch = jjstrLiteralImages[69].length();
                                     System.out.println("INCREMENTO: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnOP. UNARIO INCREMENTO: "+image);
         break;
      case 70 :
        image.append(jjstrLiteralImages[70]);
        lengthOfMatch = jjstrLiteralImages[70].length();
                                     System.out.println("DECREMENTO: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnOP. UNARIO DECREMENTO: "+image);
         break;
      case 71 :
        image.append(jjstrLiteralImages[71]);
        lengthOfMatch = jjstrLiteralImages[71].length();
                                     System.out.println("OPERADOR ARITMETICO: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnOPERADOR ARITMETICO SOMA: "+image);
         break;
      case 72 :
        image.append(jjstrLiteralImages[72]);
        lengthOfMatch = jjstrLiteralImages[72].length();
                                     System.out.println("OPERADOR ARITMETICO: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnOPERADOR ARITMETICO SUB: "+image);
         break;
      case 73 :
        image.append(jjstrLiteralImages[73]);
        lengthOfMatch = jjstrLiteralImages[73].length();
                                     System.out.println("OPERADOR ARITMETICO: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnOPERADOR ARITMETICO MULT: "+image);
         break;
      case 74 :
        image.append(jjstrLiteralImages[74]);
        lengthOfMatch = jjstrLiteralImages[74].length();
                                     System.out.println("OPERADOR ARITMETICO: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnOPERADOR ARITMETICO DIV: "+image);
         break;
      case 75 :
        image.append(jjstrLiteralImages[75]);
        lengthOfMatch = jjstrLiteralImages[75].length();
                                     System.out.println("OPERADOR ARITMETICO: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnOPERADOR ARITMETICO RESTO: "+image);
         break;
      case 76 :
        image.append(jjstrLiteralImages[76]);
        lengthOfMatch = jjstrLiteralImages[76].length();
                                     System.out.println("OPERADOR LOGICO: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnOPERADOR LOGICO: "+image);
         break;
      case 77 :
        image.append(jjstrLiteralImages[77]);
        lengthOfMatch = jjstrLiteralImages[77].length();
                                     System.out.println("OPERADOR LOGICO: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnOPERADOR LOGICO: "+image);
         break;
      case 78 :
        image.append(jjstrLiteralImages[78]);
        lengthOfMatch = jjstrLiteralImages[78].length();
                                     System.out.println("OP. ATRIBUICAO IGUAL: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnOP. ATRIBUICAO IGUAL: "+image);
         break;
      case 79 :
        image.append(jjstrLiteralImages[79]);
        lengthOfMatch = jjstrLiteralImages[79].length();
                                     System.out.println("OPERADOR RELACIONAL: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnOPERADOR RELACIONAL: "+image);
         break;
      case 80 :
        image.append(jjstrLiteralImages[80]);
        lengthOfMatch = jjstrLiteralImages[80].length();
                                     System.out.println("OPERADOR RELACIONAL: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnOPERADOR RELACIONAL: "+image);
         break;
      case 81 :
        image.append(jjstrLiteralImages[81]);
        lengthOfMatch = jjstrLiteralImages[81].length();
                                     System.out.println("OPERADOR RELACIONAL: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnOPERADOR DESIGUALDADE: "+image);
         break;
      case 82 :
        image.append(jjstrLiteralImages[82]);
        lengthOfMatch = jjstrLiteralImages[82].length();
                                     System.out.println("OPERADOR IGUALDADE: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnOPERADOR IGUALDADE: "+image);
         break;
      case 83 :
        image.append(jjstrLiteralImages[83]);
        lengthOfMatch = jjstrLiteralImages[83].length();
                                     System.out.println("OPERADOR LOGICO: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnOPERADOR LOGICO END: "+image);
         break;
      case 84 :
        image.append(jjstrLiteralImages[84]);
        lengthOfMatch = jjstrLiteralImages[84].length();
                                     System.out.println("OPERADOR LOGICO: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnOPERADOR LOGICO END: "+image);
         break;
      case 85 :
        image.append(jjstrLiteralImages[85]);
        lengthOfMatch = jjstrLiteralImages[85].length();
                                     System.out.println("OPERADOR LOGICO: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnOPERADOR LOGICO OU: "+image);
         break;
      case 86 :
        image.append(jjstrLiteralImages[86]);
        lengthOfMatch = jjstrLiteralImages[86].length();
                                     System.out.println("OPERADOR LOGICO: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnOPERADOR LOGICO OU: "+image);
         break;
      case 87 :
        image.append(jjstrLiteralImages[87]);
        lengthOfMatch = jjstrLiteralImages[87].length();
                                     System.out.println("OPERADOR LOGICO: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnOPERADOR LOGICO NOT: "+image);
         break;
      case 88 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                     System.out.println("CONST. INTEIRO: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnCONST. INTEIRO: "+image);
         break;
      case 89 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                     System.out.println("CONST. DECIMAL: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnCONST. DECIMAL: "+image);
         break;
      case 90 :
        image.append(jjstrLiteralImages[90]);
        lengthOfMatch = jjstrLiteralImages[90].length();
                                     System.out.println("BOOLEANO: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnTIPO BOOLEANO TRUE: "+image);
         break;
      case 91 :
        image.append(jjstrLiteralImages[91]);
        lengthOfMatch = jjstrLiteralImages[91].length();
                                     System.out.println("BOOLEANO: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnTIPO BOOLEANO FALSE: "+image);
         break;
      case 92 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                     System.out.println("CONSTANTE_STRING: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnCONST. CHAR: "+image);
         break;
      case 93 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                     System.out.println("CONSTANTE_STRING: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnCONST. STRING: "+image);
         break;
      case 94 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                     System.out.println("IDENTIFICADOR: "+image);
                                     analizarlexico.jTextArea2.setText(analizarlexico.jTextArea2.getText()+"\u005cnIDENTIFICADOR: "+image);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public Scanner_1TokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public Scanner_1TokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 53; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0x7fffffffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x1e00000000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x1e00000000L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[53];
    private final int[] jjstateSet = new int[2 * 53];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected char curChar;
}
